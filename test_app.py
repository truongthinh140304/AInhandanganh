#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Test script cho AI Object Recognition Application
"""

import os
import sys
import cv2
import numpy as np
from main import AIObjectRecognizer

def create_test_image():
    """
    T·∫°o ·∫£nh test ƒë∆°n gi·∫£n
    """
    # T·∫°o ·∫£nh tr·∫Øng 640x480
    image = np.ones((480, 640, 3), dtype=np.uint8) * 255
    
    # V·∫Ω m·ªôt h√¨nh ch·ªØ nh·∫≠t ƒë∆°n gi·∫£n ƒë·ªÉ gi·∫£ l·∫≠p ng∆∞·ªùi
    cv2.rectangle(image, (200, 100), (400, 400), (0, 0, 0), -1)  # Ng∆∞·ªùi ƒëen
    cv2.rectangle(image, (250, 150), (350, 250), (255, 255, 255), -1)  # √Åo tr·∫Øng
    
    # V·∫Ω m·ªôt h√¨nh tr√≤n ƒë·ªÉ gi·∫£ l·∫≠p v·∫≠t d·ª•ng
    cv2.circle(image, (300, 350), 30, (0, 255, 0), -1)  # V·∫≠t d·ª•ng xanh
    
    # L∆∞u ·∫£nh test
    test_path = "data/test_image.jpg"
    cv2.imwrite(test_path, image)
    print(f"ƒê√£ t·∫°o ·∫£nh test t·∫°i: {test_path}")
    
    return test_path

def test_basic_functionality():
    """
    Test c√°c ch·ª©c nƒÉng c∆° b·∫£n
    """
    print("="*60)
    print("TESTING AI OBJECT RECOGNITION APPLICATION")
    print("="*60)
    
    try:
        # T·∫°o ·∫£nh test
        test_image_path = create_test_image()
        
        # Kh·ªüi t·∫°o recognizer
        print("\n1. Kh·ªüi t·∫°o AI Object Recognizer...")
        recognizer = AIObjectRecognizer()
        print("‚úì Kh·ªüi t·∫°o th√†nh c√¥ng!")
        
        # Test ph√¢n t√≠ch ·∫£nh
        print("\n2. Ph√¢n t√≠ch ·∫£nh test...")
        result = recognizer.process_image(test_image_path)
        print("‚úì Ph√¢n t√≠ch th√†nh c√¥ng!")
        
        # Hi·ªÉn th·ªã k·∫øt qu·∫£
        print("\n3. Hi·ªÉn th·ªã k·∫øt qu·∫£...")
        recognizer.display_results(result)
        print("‚úì Hi·ªÉn th·ªã th√†nh c√¥ng!")
        
        # Test c√°c h√†m utils
        print("\n4. Test c√°c h√†m utils...")
        test_utils_functions()
        print("‚úì Test utils th√†nh c√¥ng!")
        
        print("\n" + "="*60)
        print("üéâ T·∫§T C·∫¢ TEST ƒê·ªÄU TH√ÄNH C√îNG!")
        print("="*60)
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå L·ªói trong qu√° tr√¨nh test: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_utils_functions():
    """
    Test c√°c h√†m trong utils.py
    """
    from utils import detect_dominant_color, rgb_to_color_name, classify_scene_simple
    
    # Test t·∫°o ·∫£nh m√†u ƒë·ªè
    red_image = np.zeros((100, 100, 3), dtype=np.uint8)
    red_image[:, :, 2] = 255  # K√™nh ƒë·ªè
    
    # Test ph√°t hi·ªán m√†u ch·ªß ƒë·∫°o
    color_name, color_rgb = detect_dominant_color(red_image)
    print(f"   - Ph√°t hi·ªán m√†u ƒë·ªè: {color_name}")
    
    # Test ph√¢n lo·∫°i phong c·∫£nh
    scene, confidence = classify_scene_simple(red_image)
    print(f"   - Ph√¢n lo·∫°i phong c·∫£nh: {scene} (confidence: {confidence:.2f})")
    
    # Test chuy·ªÉn ƒë·ªïi RGB sang t√™n m√†u
    test_colors = [
        [255, 0, 0],    # ƒê·ªè
        [0, 255, 0],    # Xanh l√°
        [0, 0, 255],    # Xanh d∆∞∆°ng
        [255, 255, 255], # Tr·∫Øng
        [0, 0, 0],      # ƒêen
    ]
    
    for color in test_colors:
        color_name = rgb_to_color_name(np.array(color))
        print(f"   - RGB{color} -> {color_name}")

def test_with_real_image():
    """
    Test v·ªõi ·∫£nh th·∫≠t (n·∫øu c√≥)
    """
    # T√¨m ·∫£nh trong th∆∞ m·ª•c data
    data_dir = "data"
    if os.path.exists(data_dir):
        image_files = [f for f in os.listdir(data_dir) 
                      if f.lower().endswith(('.jpg', '.jpeg', '.png'))]
        
        if image_files:
            test_image = os.path.join(data_dir, image_files[0])
            print(f"\n5. Test v·ªõi ·∫£nh th·∫≠t: {test_image}")
            
            try:
                recognizer = AIObjectRecognizer()
                result = recognizer.process_image(test_image)
                recognizer.display_results(result)
                print("‚úì Test v·ªõi ·∫£nh th·∫≠t th√†nh c√¥ng!")
                return True
            except Exception as e:
                print(f"‚ùå L·ªói khi test v·ªõi ·∫£nh th·∫≠t: {e}")
                return False
        else:
            print("\n5. Kh√¥ng t√¨m th·∫•y ·∫£nh th·∫≠t ƒë·ªÉ test")
            return True
    else:
        print("\n5. Th∆∞ m·ª•c data kh√¥ng t·ªìn t·∫°i")
        return True

def main():
    """
    H√†m main cho test
    """
    # T·∫°o th∆∞ m·ª•c data n·∫øu ch∆∞a c√≥
    os.makedirs("data", exist_ok=True)
    
    # Ch·∫°y test c∆° b·∫£n
    basic_test_passed = test_basic_functionality()
    
    # Ch·∫°y test v·ªõi ·∫£nh th·∫≠t
    real_image_test_passed = test_with_real_image()
    
    # T·ªïng k·∫øt
    print("\n" + "="*60)
    print("T·ªîNG K·∫æT TEST")
    print("="*60)
    print(f"Test c∆° b·∫£n: {'‚úì PASSED' if basic_test_passed else '‚ùå FAILED'}")
    print(f"Test ·∫£nh th·∫≠t: {'‚úì PASSED' if real_image_test_passed else '‚ùå FAILED'}")
    
    if basic_test_passed and real_image_test_passed:
        print("\nüéâ T·∫§T C·∫¢ TEST ƒê·ªÄU TH√ÄNH C√îNG!")
        print("·ª®ng d·ª•ng s·∫µn s√†ng s·ª≠ d·ª•ng!")
        return 0
    else:
        print("\n‚ùå M·ªòT S·ªê TEST TH·∫§T B·∫†I!")
        print("Vui l√≤ng ki·ªÉm tra l·∫°i c√†i ƒë·∫∑t v√† dependencies.")
        return 1

if __name__ == "__main__":
    sys.exit(main())
