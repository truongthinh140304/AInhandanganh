#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
·ª®ng d·ª•ng Flask: AI Object Recognition Web App
"""

import os
import json
import numpy as np
from flask import Flask, render_template, request, redirect, url_for, flash, jsonify, Response
from flask_cors import CORS
from werkzeug.utils import secure_filename
from main import AIObjectRecognizer

# ===============================
# ‚öôÔ∏è C·∫•u h√¨nh c∆° b·∫£n
# ===============================
app = Flask(__name__)
app.secret_key = "aiobjectrecognitionsecret"
CORS(app)

# Gi·ªõi h·∫°n dung l∆∞·ª£ng upload
app.config['MAX_CONTENT_LENGTH'] = 16 * 1024 * 1024  # 16MB

# ƒê∆∞·ªùng d·∫´n upload & k·∫øt qu·∫£
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
UPLOAD_FOLDER = os.path.join(BASE_DIR, "data", "uploads")
RESULT_FOLDER = os.path.join(BASE_DIR, "data", "results")
os.makedirs(UPLOAD_FOLDER, exist_ok=True)
os.makedirs(RESULT_FOLDER, exist_ok=True)

ALLOWED_EXTENSIONS = {"png", "jpg", "jpeg", "gif", "bmp"}

# ===============================
# üß† H√†m ti·ªán √≠ch
# ===============================
def allowed_file(filename):
    """Ki·ªÉm tra ƒë·ªãnh d·∫°ng file h·ª£p l·ªá"""
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS


def to_serializable(obj):
    """
    üîß Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu kh√¥ng JSON-serializable (numpy, tensor...) sang ki·ªÉu h·ª£p l·ªá
    """
    if isinstance(obj, (np.float32, np.float64)):
        return float(obj)
    if isinstance(obj, (np.int32, np.int64)):
        return int(obj)
    if isinstance(obj, np.ndarray):
        return obj.tolist()
    return str(obj)


# ===============================
# üß† Kh·ªüi t·∫°o AI model
# ===============================
recognizer = AIObjectRecognizer()

# ===============================
# üè† Trang ch·ªß
# ===============================
@app.route('/')
def index():
    return render_template('index.html')


# ===============================
# üì§ X·ª≠ l√Ω upload ·∫£nh
# ===============================
@app.route('/upload', methods=['POST'])
def upload_file():
    if 'file' not in request.files:
        flash("Kh√¥ng c√≥ file n√†o ƒë∆∞·ª£c ch·ªçn.")
        return redirect(url_for('index'))

    file = request.files['file']

    if file.filename == '':
        flash("Vui l√≤ng ch·ªçn m·ªôt file ·∫£nh h·ª£p l·ªá.")
        return redirect(url_for('index'))

    if file and allowed_file(file.filename):
        filename = secure_filename(file.filename)
        filepath = os.path.join(UPLOAD_FOLDER, filename)
        file.save(filepath)
        print(f"üì∏ ƒê√£ nh·∫≠n ·∫£nh: {filepath}")

        try:
            # G·ªçi model AI x·ª≠ l√Ω ·∫£nh
            result = recognizer.process_image(filepath)
            print("‚úÖ X·ª≠ l√Ω ·∫£nh ho√†n t·∫•t.")

            # T·∫°o d·ªØ li·ªáu k·∫øt qu·∫£
            result_data = {
                "filename": filename,
                "original_image": f"/static/{filename}" if os.path.exists(f"static/{filename}") else None,
                "result_image": result.get("result_image"),
                "analysis": result,
            }

            # L∆∞u k·∫øt qu·∫£ JSON (√©p ki·ªÉu an to√†n)
            result_json_path = os.path.join(RESULT_FOLDER, f"{os.path.splitext(filename)[0]}.json")
            with open(result_json_path, "w", encoding="utf-8") as f:
                json.dump(result_data, f, ensure_ascii=False, indent=2, default=to_serializable)

            print(f"üíæ ƒê√£ l∆∞u k·∫øt qu·∫£ v√†o: {result_json_path}")

            # Hi·ªÉn th·ªã k·∫øt qu·∫£
            return render_template('results.html', result=result_data)

        except Exception as e:
            print(f"‚ùå L·ªói khi x·ª≠ l√Ω ·∫£nh: {e}")
            import traceback
            traceback.print_exc()
            flash(f"L·ªói khi x·ª≠ l√Ω ·∫£nh: {e}")
            return redirect(url_for('index'))

    else:
        flash("ƒê·ªãnh d·∫°ng file kh√¥ng h·ª£p l·ªá. Vui l√≤ng ch·ªçn JPG, PNG, JPEG, GIF ho·∫∑c BMP.")
        return redirect(url_for('index'))


# ===============================
# üìú Trang l·ªãch s·ª≠
# ===============================
@app.route('/history')
def history():
    files = [f for f in os.listdir(RESULT_FOLDER) if f.endswith('.json')]
    results = []
    for f in sorted(files, reverse=True):
        try:
            with open(os.path.join(RESULT_FOLDER, f), encoding="utf-8") as infile:
                data = json.load(infile)
                results.append(data)
        except Exception as e:
            print(f"L·ªói ƒë·ªçc file {f}: {e}")
            continue
    return render_template('history.html', results=results)


# ===============================
# üåê API Endpoint cho Flutter/Web kh√°c
# ===============================
@app.route('/api/analyze', methods=['POST'])
def api_analyze():
    """API ph√¢n t√≠ch ·∫£nh v√† tr·∫£ v·ªÅ JSON"""
    if 'file' not in request.files:
        return jsonify({"success": False, "error": "No file uploaded"}), 400

    file = request.files['file']
    if file.filename == '' or not allowed_file(file.filename):
        return jsonify({"success": False, "error": "Invalid file format"}), 400

    filename = secure_filename(file.filename)
    filepath = os.path.join(UPLOAD_FOLDER, filename)
    file.save(filepath)
    print(f"üì• [API] ƒê√£ nh·∫≠n file: {filename}")

    try:
        result = recognizer.process_image(filepath)
        response_data = {"success": True, "analysis": result}

        # Tr·∫£ v·ªÅ JSON an to√†n
        return Response(
            json.dumps(response_data, ensure_ascii=False, indent=2, default=to_serializable),
            mimetype="application/json"
        )
    except Exception as e:
        print(f"‚ùå [API] L·ªói x·ª≠ l√Ω ·∫£nh: {e}")
        return jsonify({"success": False, "error": str(e)}), 500


# ===============================
# üöÄ Ch·∫°y ·ª©ng d·ª•ng
# ===============================
if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=True)
